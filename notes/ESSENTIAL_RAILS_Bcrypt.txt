NOTE:  ADD THESE NOTES BELOW TO ESSENTIAL RAILS IN github.
NOTE: BREAK THIS FILE INTO TWO SEPARATE ONES: 1) Polymorphic, 2) Bcrypt, 3) PG Dump-Restore

====================================
** ESSENTIAL RAILS....1) Polymorphic
====================================

1) Generate Track Scaffold:
  1a) $ rails g model Track

  1b) Check User Migration (nothing to do - just check if ok.):
    class CreateTracks < ActiveRecord::Migration[5.1]
      def change
        create_table :tracks do |t|
          t.references :user, index: true, null: false

          t.timestamps
        end
      end
    end

  1c) Configure Tracks Model:
  class Track < ApplicationRecord
    belongs_to :user

    has_many :exportings
    has_many :acts, through: :exportings, source: :exportable, source_type: :act
    has_many :webs, through: :exportings, source: :exportable, source_type: :web
    has_many :conts, through: :exportings, source: :exportable, source_type: :cont
  end
--------------------

2) Generate Tracking Scaffold:

  2a) $ rails g model Tracking track:references{index} exportable:references{polymorphic}:index

  2b) Check User Migration (nothing to do - just check if ok.):
    class CreateTrackings < ActiveRecord::Migration[5.1]
      def change
        create_table :exportings do |t|
          t.references :track, index: true, foreign_key: true
          t.references :exportable, polymorphic: true

          t.timestamps
        end
        add_index :exportings, [:export_id, :exportable_type, :exportable_id], unique: true, name: 'exportings_index'
      end
    end

  2c) Configure Trackings Model:
    class Tracking < ApplicationRecord
      belongs_to :exportable, polymorphic: true
      belongs_to :track

      validates :export_id, :uniqueness => { :scope => [:exportable_type, :exportable_id] }
    end
--------------------

3) Edit Associated Models
  3a) Add the following in each (Acts, Conts, Webs Models) to create associations to Track/Tracking:
    has_many :exportings, as: :exportable
    has_many :tracks, through: :exportings

  3b) Add the following in (Users Model) to create associations to Track/Tracking:
    has_many :tracks, dependent: :destroy
--------------------




====================================
** ESSENTIAL RAILS....2) Bcrypt/User
====================================

1) Install Gems:
  # Use ActiveModel has_secure_password (for session help)
  gem 'bcrypt'
--------------------

2) Generate User Scaffold:
  2a) $ rails generate scaffold User username:string email:string pw_hash:string

  2b) Edit User Migration (Important!):
    class CreateUsers < ActiveRecord::Migration[5.1]
      def change
        create_table :users do |t|
          t.string :username
          t.string :email, null: false
          t.string :password_digest, null: false
          t.string :role, { default: "standard" }

          t.timestamps
        end
      end
    end

  2c) Configure Users Model:
    class User < ApplicationRecord
      has_secure_password
      validates :username, :email, :password, presence: true
      validates :email, uniqueness: true
      has_one :profile, dependent: :destroy
    end
--------------------

3) Generate Profile Scaffold:
  3a) $ rails generate scaffold Profile user:references{index} first_name:string last_name:string phone:string

  3b) Check Profile Migration (nothing to do - just check if ok.):
    class CreateProfiles < ActiveRecord::Migration[5.1]
      def change
        create_table :profiles do |t|
          t.references :user, index: true, foreign_key: true
          t.string :first_name
          t.string :last_name
          t.string :phone

          t.timestamps
        end
      end
    end

  3c) Configure Profile Model:
    class Profile < ApplicationRecord
      belongs_to :user

      def fullname
        "#{self.first_name} #{self.last_name}"
      end
    end
--------------------

4) DB Migrate: $ rails db:migrate
--------------------

5) Controllers (Application, Home, Profiles, Sessions, Users; all controllers)
  * Several detailed variations across controllers.  Too many to list.  Most significant listed below.  Use ShareSpace or SDF2 as exact references.

  5a) $ rails g controller Sessions (then copy paste from sdf2 or sharespace)

  5b) UsersController - Paste to top: skip_before_action :require_login, only: [:new, :create]
    Then compare controllers line by line with sdf2 and sharespace to edit:

  5c) ApplicationController (IMPORTANT!): Contains methods requiring login and registration.
    Copy and paste entire file from SDF2 or ShareSpace

  5d) HomeController - Paste to top: skip_before_action :require_login, only: [:index, :show]
--------------------

6) Views: Ensure all have been created, then refactor them into partials for ajax if not already done.
  'CopyPaste' indicates to copy and paste exactly from SDF2 or ShareSpace.
  6a) CopyPaste: users (entire file as is.  just replace current).
  6b) CopyPaste: sessions(_form.html.erb & _new.html.erb) *Only contains two files.
--------------------

7) Add to Routes:
    get 'signup', to: 'users#new', as: 'signup'
    get 'login', to: 'sessions#new', as: 'login'
    get 'logout', to: 'sessions#destroy', as: 'logout'
--------------------

8) Update Navigation to include new registration and login form and control who sees which form.

--------------------




====================================
** ESSENTIAL RAILS....3) PG Dump-Restore
====================================
# Call: ServCsvTool.new.restore_backup(Brand, 'Brands.csv')


1) Backup PG
  $ pg_dump -U postgres -F t sdf2_development > db/csv/pg_backups/sdf2_development.psql
  $ pg_dump -F c -v -U postgres -h localhost sdf2_development -f db/csv/pg_backups/sdf2_development.tar

2) Restore PG:
  $ pg_restore -U postgres db/csv/pg_backups/sdf2_development.psql
  $ pg_restore -c -C -F c -v -U postgres db/csv/pg_backups/sdf2_development.tar


======================

Add hstore
sdf2_development
sdf2_production

psql template1 -c 'create extension hstore;'
psql sdf2_development -c 'create extension hstore;'
psql sdf2_production -c 'create extension hstore;'

JSON.parse( h.to_json, {:symbolize_names => true} )


# query.params ## Need to convert params q from array to hash.
# query.params['q']
# JSON.parse( h.to_json, {:symbolize_names => true} )
# acts = JSON.parse(acts)
# raw = Tally.last.acts
# acts = JSON.parse(Tally.last.acts)
# hash = Hash[array.collect { |item| [item, ""] } ]

# JSON.parse(query.params)
# query.params['q'].class = String
# params[:q].to_h
# q = query.params['q']
# JSON.parse(value)

# q_string = Query.last.params['q'].class = String
# JSON.parse(q_string)

#params[:q] is a query hash you can manipulate directly.
# In Rails 5, it's an ActionController::Parameters object that you can call #to_unsafe_h on (if it responds_to?(:to_unsafe_h)) to turn into a HWIA.

# foo = ActionController::Parameters.new("foo"=>{"bar"=>["baz"]})



====================================
** ESSENTIAL RAILS....4) migration files
====================================
--ADD
  $ rails generate migration add_aq_name_to_acts aq_name:string
  $ rails generate migration add_cq_name_to_conts cq_name:string
  $ rails generate migration add_wq_name_to_webs wq_name:string


--CHANGE
  $ rails g migration ChangeColumnName1
  rename_column :acts, :aq_name, :q_name
  rename_column :conts, :cq_name, :q_name
  rename_column :webs, :wq_name, :q_name

  $ rails g migration ChangeColumnName3
  rename_column :query, :params, :params



--REMOVE


====================================
** ESSENTIAL RAILS....5) Ransack-BS-Ruby Form Styles
====================================
## Not easy to get right, so keep this resource.

--- YES ---Boring
  <div class="form-group">
    <p>Save Search-1-YES!</p>
    <p><%= f.search_field :wq_name_cont_any %></p>
  </div>

--- YES ---Nice!!
  <div class="form-group">
    <%= f.label :wq_name_cont_any, "Save Search-2-YES", class: "col-md-4 control-label" %>
    <div class="col-md-8">
      <%= f.text_field :wq_name_cont_any, class: "form-control" %>
    </div>
  </div>

--- NO ---
  <div class="form-group">
    <label for="usr">Save Search-3-NO!</label>
    <input type="text" class="form-control" id="usr">
  </div>

  -----------
  Placeholder Text
  f.text_field :attr, placeholder: "placeholder text"

  Submit Button
  <div class="actions"><%= f.submit "Search", class: "btn btn-primary btn-xs"%></div>

  Clear Form - link_to (not button)
  <div class=""><%= link_to("Clear Search", request.path) %></div>

  Reset Form - button_tag
  <div class=""><%= button_tag "Reset", type: :reset, class: "btn btn-primary btn-xs" %></div>

  Submit - Reset Buttons - Set
  <div class="row">
    <div class="actions col-md-6"><%= f.submit "Search", class: "btn btn-primary btn-xs"%></div>
    <div class="col-md-6"><%= button_tag "Reset", type: :reset, class: "btn btn-danger btn-xs" %></div>
  </div>
